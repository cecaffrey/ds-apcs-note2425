Selection Sort
 
 
Go to http://math.hws.edu/eck/js/sorting/xSortLab.html to watch the sorts in action.
 
The goal in sorting is to put a list of items in order. “To put in order” means to be able to compare any two items and determine before-and-after, or less-than-greater-than.  For primitive types we just use the built-in less-than operator (<).  For objects we either use compareTo(), if the class implements the Comparable interface, or compare() if the class implements the Comparator interface.  If none of these apply, then the objects don’t have any order, and it makes no sense to sort the list.
 
There are many ways to sort a list of items. In this unit, we will learn the algorithms for the Selection Sort, Insertion Sort, Merge Sort, and Quick Sort.  We will also learn the Big-O efficiency for each sort in its best case, average case, and worst case.
 
Selection Sort
Find the largest item in the list and swap it to the end. That item is now in its correct position and is no longer considered. Now look at the sublist containing the first N–1 items. On that sublist, find the largest item and swap it to the end (the next to last position of the overall list). That item is now in its correct position and is no longer considered. Then move to the sublist containing the first N–2 items, and repeat. A list with N items needs N-1 passes.
 
begin
3
1
4
1
5
9
2
6
pass 1
 
 
 
 
 
 
 
 
pass 2
 
 
 
 
 
 
 
 
pass 3
 
 
 
 
 
 
 
 
pass 4
 
 
 
 
 
 
 
 
pass 5
 
 
 
 
 
 
 
 
pass 6
 
 
 
 
 
 
 
 
pass 7
 
 
 
 
 
 
 
 
Exercises
 
1. Suppose you are finding the largest and swapping to the end.  What does this array look like after 3 passes?
 
4
3
7
3
1
8
5
6
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
2. Suppose you are finding the smallest and swapping to the front.  What does this array look like after 3 passes?
4
3
7
3
1
8
5
6
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
3
6
2
7
2
1
3. Let’s think about the Big-O of the Selection Sort in its best case, average case, and worst case.  We will focus on the number of comparisons made by the algorithm.  Here is an array with 6 items in random order:  
 
 
How many comparisons are made to sort this array in ascending order?  ______
 
1
2
3
4
5
6
4. Here is a 6-item array already in sorted order (ascending order):    
 
How many comparisons are made to sort this array in ascending order?  ______
 
 
6
5
4
3
2
1
5. Here is a 6-item array in reverse order (descending order):
 
How many comparisons are made to sort the array in ascending order?  ______
 
 
6. What can you conclude from above?   _____________________________________________
 
7. Know thy Big-O:  the Selection Sort is  _____ in the best case,  _____ in the average case, and _____ in the worst case.
 
8. The headers for the Selection Sort are:
 
  public static void sort(double[] array)
private static int findMax(double[] array, int n)
private static void swap(double[] array, int a, int b)
Why are these methods in the resource class marked static?  What difference does static make?
 
Lab Assignment
The driver class is called SelectionSort_Driver.  It tests your code with both doubles and Strings (the first 100 words of the Declaration of Independence).
 
Your job is to complete the resource class Selection.  A set of methods will sort doubles.  Another set of methods will sort Comparables.  Complete both isAscending methods.  
 
Notice that SuppressWarnings("unchecked") removes the warning messages.
