Pig Latin
 
Part I:  PigLatinize single words
 
Basic Rules
Write your algorithm to return the basic-rules PigLatinized string:
 
Pig Latin is a pretend language. The basic rule is simple: move all the letters that appear before the first vowel to the end of the word and append “ay”.
pig à igpay
latin à atinlay
this à isthay
strange à angestray
 
However, if the first letter is a vowel, append “way”.
         apple à appleway
​a à away
        upper à upperway
 
If the word has no vowel, return “**** NO VOWEL ****”
sfghjkl à  **** NO VOWEL ****
 
Consider using charAt, indexOf, contains, and substring, and others.  The shell PigLatin.java  
defines these helpful constants:
 String punct = ",./;:'\"?<>[]{}|`~!@#$%^&*()";
 String letters = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz";
 String vowels = "AEIOUaeiou";
 
Special Cases
Write your algorithm for “qu”:
 
 
 
 
 
 
Write your algorithm for “y”:
 
 
 
 
 
 
Write your test to see if the first letter is capitalized:
 
If “qu” is before a vowel, “qu” is treated like a consonant.  There are two ways to think about this.  Whichever way you do it, make sure that a first-letter “u” still works.
question à estionquay
squeeze à eezesquay
esquire à esquireway
 
If the first letter is a “y” then treat it as a consonant; if the first vowel is a “y”, treat it as a vowel.
yellow à ellowyay
rhyme à ymerhay
eye à eyeway
 
Capitalization
If the first letter is capitalized, then the PigLatin word’s first letter is capitalized and the original first letter is in lower case. Ignore capital letters in the middle of the original word; they should remain capitalized in the PigLatin word.
​Thomas à Omasthay
Question à Estionquay
McDonald à OnaldmcDay
I à Iway
BUBBLES à UBBLESbay
 
Punctuation
Write your algorithm to remove and store punctuation occurring before the word:
Punctuation occurring before the word should be removed, stored, and prepended to the piglatinized word.  Punctuation occurring after the word should be removed, stored, and appended to the piglatinized word. Any punctuation that is in the middle of the word is to be treated as a regular letter.
​what? à atwhay?
​Oh!!! à Ohway!!!
​“hello” à “ellohay”
​([Hello]) à ([Ellohay])
don’t à on’tday
“pell-mell” à “ell-mellpay”
 
 
Make more test cases similar to the ones above.  Please don’t waste your time making up crazy test cases!
 
Part II:  PigLatinize each word in a Text File
 
Open PigLatin.java.   In the main, comment out part_1_using_pig(); and comment in part_2_using_piglatenizeFile();
 
The shell prompts the user to enter the name of an input text file and the name of the output text file.  The input file will contain English words and the output file will contain PigLatin words.  
 
A Scanner object reads in the filename.  Another Scanner object and a File object read the text file.  A PrintWriter object and a FileWriter object work together to output the file. We use try-catch blocks to catch the exceptions.
 
You are to process the input file into PigLatin, preserving the line and paragraph structure of the input file.  There are several ways to preserve the line structure, but they all use nested loops. You may want to consider using nextLine and split, Scanner, or StringTokenizer.  Use these files for testing:
PigLatin.txt
LittleFrog.txt
declaration.txt
 
Sample (using LittleFrog.txt)
​Input​​​​ Output
I have a little frog,
His name is Tiny Tim.
I put him in the bathtub,
to see if he could swim.
Iway avehay away ittlelay ogfray,
Ishay amenay isway Inytay Imtay.
Iway utpay imhay inway ethay athtubbay,
otay eesay ifway ehay ouldcay imsway.
 
Extension
Write a pigReverse method that returns an already PigLatinized word in reverse, preserving before-and-after punctuation and adjusting an initial upper case letter.  For example,
 
pigReverse("Atwhay!?") returns the String Yahwta!?
pigReverse("{(Ellohay!)}!?") returns the String {(Yaholle!)}!?
pigReverse("\"OnaldmcDay???\"" returns the String "YaDcmdlano???"
