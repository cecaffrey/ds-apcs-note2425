ListLab1, extended
 
Recall that we introduced the ListNode class.  Here is the ListNode API:
Constructor Summary
ListNode(java.lang.Object initValue, ListNode initNext)
          Construct a list node with specified value and next node.
 
 Method Summary
 ListNode
getNext()
          Returns the next node after this node.
 java.lang.Object
getValue()
          Returns the value stored in this node.
 void
setNext(ListNode theNewNext)
          Sets the next node after this node
 void
setValue(java.lang.Object theNewValue)
          Sets the value stored in this node.
 
Exercises
1. Draw a picture of the linked list constructed by the following commands.
ListNode p = new ListNode("board", null);
ListNode a = new ListNode("college", p);
 
 
 
 
 
2.  Implement the three methods below.
// returns a new node that is a copy of the argument node.
public static ListNode copyNode(ListNode arg)
{
 
 
 
 
 
}
 
// returns a new list that is a copy of the original list.
// this method is recursive!
// example call:  ListNode head2 = copyList(head);
public static ListNode copyList(ListNode arg)
{​​
 
 
 
 
}
//returns a new linked list containing copies of each node in //the original list except the first node, maintaining the //order of the original list.  It is not correct to just //return a pointer to the 2nd node of the original linked //list.  This method is recursive.
public static ListNode rest(ListNode h)
{
 
 
 
 
 
}
 
3.  Write the following six methods that operate on a linked list of ListNode objects.  You may wish to make use of the three methods above.
 
// returns the value of the first node, or null if the list is empty
public static Object first(ListNode head)
 
// returns the value of the second node, or null if the list is empty or if there is only one node.  // hint:  second could call the first of rest.
public static Object second(ListNode head)
 
//returns a reference to the last node in the list, or null if the list is empty.
public static ListNode pointerToLast(ListNode head)
 
//returns a copy of the last node (not just its value!).  copyofLast can be recursive.
public static ListNode copyOfLast(ListNode head)
 
//returns a reference to a list whose first node's value is specified by the argument, and the
//first node's next links to the original list.
public static ListNode insertFirst(ListNode head, Object arg)
 
//returns a reference to a list whose last node's value is specified by the argument, such
//that this last node has been appended to the original list and had its next is set to null
public static ListNode insertLast(ListNode head, Object arg)
 
Assignment
Open ListLab1 and write all nine (9) methods above.   The driver is given to you.
Sample run:  
[computer, science, java, coffee, nonsense, boo, foo, hello]
[computer, science, java, coffee, nonsense, boo, foo, hello]
The head has a value "computer" at ListNode@15db9742
The copy of head has a value of "computer" at ListNode@6d06d69c
Copy the list: [computer, science, java, coffee, nonsense, boo, foo, hello]
The rest of the list: [science, java, coffee, nonsense, boo, foo, hello]
First of the rest = science
Second of the rest = java
Pointer to Last = hello at ListNode@7852e922
Copy of Last =    hello at ListNode@4e25154f​​
Insert what? p
[p, science, java, coffee, nonsense, boo, foo, hello, p]
